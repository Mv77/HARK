# HARK Reference Documentation

This section provides detailed explanations and examples to help users understand how to use the various tools and models in the HARK repository.

## Table of Contents

1. [Tools](#tools)
   - [Distribution](#distribution)
   - [Estimation](#estimation)
   - [Interpolation](#interpolation)
   - [Metric](#metric)
   - [Parallel](#parallel)
   - [Utilities](#utilities)
2. [Models](#models)
   - [ConsumptionSaving](#consumptionsaving)
   - [ConsPortfolioModel](#consportfoliomodel)
   - [ConsIndShockModel](#consindshockmodel)
   - [ConsAggShockModel](#consaggshockmodel)
   - [ConsMarkovModel](#consmarkovmodel)
   - [ConsPrefShockModel](#consprefshockmodel)
   - [ConsMedModel](#consmedmodel)
   - [ConsLaborModel](#conslabormodel)
   - [ConsBequestModel](#consbequestmodel)
   - [ConsRiskyContribModel](#consriskycontribmodel)
   - [ConsRepAgentModel](#consrepagentmodel)
   - [TractableBufferStockModel](#tractablebufferstockmodel)
3. [Examples](#examples)
   - [Gentle Introduction to HARK](#gentle-introduction-to-hark)
   - [Lifecycle Model](#lifecycle-model)
   - [IndShockConsumerType](#indshockconsumertype)
   - [KinkedRconsumerType](#kinkedrconsumertype)
   - [ConsPortfolioModel](#consportfoliomodel)
   - [GenIncProcessModel](#genincprocessmodel)
   - [How We Solve IndShockConsumerType](#how-we-solve-indshockconsumertype)
   - [Journey-PhD](#journey-phd)
   - [Transition Matrix Example](#transition-matrix-example)
   - [Jacobian Example](#jacobian-example)
   - [KS-HARK Presentation](#ks-hark-presentation)
   - [SSJ Example](#ssj-example)
   - [Accidental Bequest Comparison](#accidental-bequest-comparison)
   - [Accidental Bequest Portfolio Comparison](#accidental-bequest-portfolio-comparison)
   - [Terminal Bequest](#terminal-bequest)
   - [Terminal Bequest Portfolio](#terminal-bequest-portfolio)
   - [Warm Glow Bequest](#warm-glow-bequest)
   - [Warm Glow Bequest Portfolio](#warm-glow-bequest-portfolio)
   - [Wealth Portfolio](#wealth-portfolio)
   - [Finite Cyclical Test](#finite-cyclical-test)
   - [SSJ Explanation](#ssj-explanation)
   - [ConsRiskyAssetModel](#consriskyassetmodel)
   - [ConsSequentialPortfolioModel](#conssequentialportfoliomodel)
   - [ConsAggShockModel](#consaggshockmodel)
   - [ConsGenIncProcessModel](#consgenincprocessmodel)
   - [ConsIndShock](#consindshock)
   - [ConsLaborModel](#conslabormodel)
   - [ConsMarkovModel](#consmarkovmodel)
   - [ConsMedModel](#consmedmodel)
   - [ConsPrefShockModel](#consprefshockmodel)
   - [ConsRepAgentModel](#consrepagentmodel)
   - [TractableBufferStockModel](#tractablebufferstockmodel)
   - [DiscreteDistributionLabeled](#discretedistributionlabeled)
   - [EquiprobableLognormal](#equiprobablelognormal)
   - [ExpectedValue](#expectedvalue)
   - [FrameAgentType Demo](#frameagenttype-demo)
   - [FrameModels](#framemodels)
   - [Cubic Interpolation](#cubic-interpolation)
   - [Decay Interpolation](#decay-interpolation)
   - [Azure Machine Learning](#azure-machine-learning)
   - [Journey-Engineering-Background](#journey-engineering-background)
   - [Journey-Policymaker](#journey-policymaker)
   - [JourneyPhDparam](#journeyphdparam)
   - [Journeys into HARK](#journeys-into-hark)
   - [Quickstart Tutorial](#quickstart-tutorial)
   - [LabeledModels](#labeledmodels)
   - [Generic Monte Carlo Perfect Foresight](#generic-monte-carlo-perfect-foresight)

## Tools

### Distribution

The `HARK.distribution` module includes classes for representing continuous distributions in a relatively consistent framework. It also has methods and functions for constructing discrete approximations to those distributions and manipulating these representations.

#### Example

```python
from HARK.distribution import Lognormal

# Create a lognormal distribution
lognormal_dist = Lognormal(mu=0, sigma=1)

# Draw 10 random samples from the distribution
samples = lognormal_dist.draw(10)
print(samples)
```

### Estimation

The `HARK.estimation` module provides functions for optimizing an objective function for the purposes of estimating a model. It includes minimization methods and tools for resampling data.

#### Example

```python
from HARK.estimation import minimize_nelder_mead

# Define an objective function
def objective_function(params):
    x, y = params
    return (x - 1)**2 + (y - 2)**2

# Minimize the objective function
result = minimize_nelder_mead(objective_function, [0, 0])
print(result)
```

### Interpolation

The `HARK.interpolation` module defines classes for representing interpolated function approximations. It includes various interpolation methods such as linear, cubic spline, and curvilinear interpolation.

#### Example

```python
from HARK.interpolation import LinearInterp

# Define data points for interpolation
x = [0, 1, 2, 3, 4]
y = [0, 1, 4, 9, 16]

# Create a linear interpolator
linear_interp = LinearInterp(x, y)

# Evaluate the interpolator at a specific point
value = linear_interp(2.5)
print(value)
```

### Metric

The `HARK.metric` module defines a superclass called `MetricObject` that is used throughout HARK's tools and models. It provides a universal distance metric for comparing solutions.

#### Example

```python
from HARK.metric import MetricObject

# Define a custom metric object
class CustomMetric(MetricObject):
    def __init__(self, value):
        self.value = value

    def distance(self, other):
        return abs(self.value - other.value)

# Create two instances of the custom metric object
obj1 = CustomMetric(5)
obj2 = CustomMetric(8)

# Calculate the distance between the two objects
dist = obj1.distance(obj2)
print(dist)
```

### Parallel

The `HARK.parallel` module provides basic tools for using multiple CPU cores simultaneously. It includes functions for parallel execution of commands.

#### Example

```python
from HARK.parallel import multi_thread_commands

# Define a list of agent types and commands
agent_types = [AgentType1(), AgentType2(), AgentType3()]
commands = ['solve', 'simulate']

# Execute the commands in parallel
multi_thread_commands(agent_types, commands)
```

### Utilities

The `HARK.utilities` module contains a variety of general-purpose tools, including data manipulation, kernel regression, and plotting functions.

#### Example

```python
from HARK.utilities import calculate_lorenz_shares

# Define income data
income_data = [10, 20, 30, 40, 50]

# Calculate Lorenz shares
lorenz_shares = calculate_lorenz_shares(income_data)
print(lorenz_shares)
```

## Models

### ConsumptionSaving

The `HARK.ConsumptionSaving` module includes classes and functions for solving consumption-saving models. It provides tools for representing agents and solving their optimization problems.

#### Example

```python
from HARK.ConsumptionSaving.ConsIndShockModel import IndShockConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = IndShockConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### ConsPortfolioModel

The `HARK.ConsPortfolioModel` module includes classes and functions for solving consumption-portfolio choice models. It provides tools for representing agents and solving their optimization problems.

#### Example

```python
from HARK.ConsPortfolioModel import PortfolioConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "RiskyAvg": 1.08,
    "RiskyStd": 0.2,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = PortfolioConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### ConsIndShockModel

The `HARK.ConsIndShockModel` module includes classes and functions for solving consumption-saving models with idiosyncratic shocks to income. It provides tools for representing agents and solving their optimization problems.

#### Example

```python
from HARK.ConsIndShockModel import IndShockConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = IndShockConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### ConsAggShockModel

The `HARK.ConsAggShockModel` module includes classes and functions for solving consumption-saving models with aggregate shocks. It provides tools for representing agents and solving their optimization problems.

#### Example

```python
from HARK.ConsAggShockModel import AggShockConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "AggShockStd": 0.02,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = AggShockConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### ConsMarkovModel

The `HARK.ConsMarkovModel` module includes classes and functions for solving consumption-saving models with Markovian shocks. It provides tools for representing agents and solving their optimization problems.

#### Example

```python
from HARK.ConsMarkovModel import MarkovConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "MarkovPrb": [[0.9, 0.1], [0.1, 0.9]],
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = MarkovConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### ConsPrefShockModel

The `HARK.ConsPrefShockModel` module includes classes and functions for solving consumption-saving models with preference shocks. It provides tools for representing agents and solving their optimization problems.

#### Example

```python
from HARK.ConsPrefShockModel import PrefShockConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "PrefShockStd": 0.1,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = PrefShockConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### ConsMedModel

The `HARK.ConsMedModel` module includes classes and functions for solving consumption-saving models with medical expense shocks. It provides tools for representing agents and solving their optimization problems.

#### Example

```python
from HARK.ConsMedModel import MedShockConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "MedShockStd": 0.2,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = MedShockConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### ConsLaborModel

The `HARK.ConsLaborModel` module includes classes and functions for solving consumption-saving models with labor supply decisions. It provides tools for representing agents and solving their optimization problems.

#### Example

```python
from HARK.ConsLaborModel import LaborConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "Wage": 1.0,
    "LaborSupplyElast": 0.5,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = LaborConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### ConsBequestModel

The `HARK.ConsBequestModel` module includes classes and functions for solving consumption-saving models with bequest motives. It provides tools for representing agents and solving their optimization problems.

#### Example

```python
from HARK.ConsBequestModel import BequestConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "BequestMot": 0.5,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = BequestConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### ConsRiskyContribModel

The `HARK.ConsRiskyContribModel` module includes classes and functions for solving consumption-saving models with risky contributions. It provides tools for representing agents and solving their optimization problems.

#### Example

```python
from HARK.ConsRiskyContribModel import RiskyContribConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "RiskyContribStd": 0.2,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = RiskyContribConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### ConsRepAgentModel

The `HARK.ConsRepAgentModel` module includes classes and functions for solving representative agent consumption-saving models. It provides tools for representing agents and solving their optimization problems.

#### Example

```python
from HARK.ConsRepAgentModel import RepAgentConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = RepAgentConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### TractableBufferStockModel

The `HARK.TractableBufferStockModel` module includes classes and functions for solving tractable buffer stock saving models. It provides tools for representing agents and solving their optimization problems.

#### Example

```python
from HARK.TractableBufferStockModel import TractableConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = TractableConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

## Examples

### Gentle Introduction to HARK

The Gentle Introduction to HARK provides an overview of the HARK toolkit and demonstrates its basic functionality through simple examples.

#### Example

```python
from HARK.ConsumptionSaving.ConsIndShockModel import PerfForesightConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = PerfForesightConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### Lifecycle Model

The Lifecycle Model demonstrates how to use HARK to solve a lifecycle consumption-saving model with age-dependent parameters.

#### Example

```python
from HARK.ConsumptionSaving.ConsIndShockModel import IndShockConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "LivPrb": [0.98] * 60 + [0.0],
    "PermGroFac": [1.01] * 60 + [0.0],
    "T_cycle": 61,
    "cycles": 1,
    "AgentCount": 10000,
}

# Create an instance of the model
model = IndShockConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function for the first period
print(model.solution[0].cFunc)
```

### IndShockConsumerType

The IndShockConsumerType example demonstrates how to use HARK to solve a consumption-saving model with idiosyncratic shocks to income.

#### Example

```python
from HARK.ConsumptionSaving.ConsIndShockModel import IndShockConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = IndShockConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### KinkedRconsumerType

The KinkedRconsumerType example demonstrates how to use HARK to solve a consumption-saving model with a kinked interest rate.

#### Example

```python
from HARK.ConsumptionSaving.ConsIndShockModel import KinkedRconsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "Rboro": 1.05,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = KinkedRconsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### ConsPortfolioModel

The ConsPortfolioModel example demonstrates how to use HARK to solve a consumption-portfolio choice model.

#### Example

```python
from HARK.ConsPortfolioModel import PortfolioConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "RiskyAvg": 1.08,
    "RiskyStd": 0.2,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = PortfolioConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### GenIncProcessModel

The GenIncProcessModel example demonstrates how to use HARK to solve a consumption-saving model with a general income process.

#### Example

```python
from HARK.ConsumptionSaving.ConsGenIncProcessModel import GenIncProcessConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = GenIncProcessConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### How We Solve IndShockConsumerType

The How We Solve IndShockConsumerType example provides a detailed explanation of the steps involved in solving a consumption-saving model with idiosyncratic shocks to income.

#### Example

```python
from HARK.ConsumptionSaving.ConsIndShockModel import IndShockConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = IndShockConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### Journey-PhD

The Journey-PhD example demonstrates how to use HARK to solve a consumption-saving model with a PhD journey.

#### Example

```python
from HARK.ConsumptionSaving.ConsIndShockModel import IndShockConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = IndShockConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### Transition Matrix Example

The Transition Matrix Example demonstrates how to use HARK to solve a consumption-saving model with a transition matrix.

#### Example

```python
from HARK.ConsumptionSaving.ConsMarkovModel import MarkovConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "MarkovPrb": [[0.9, 0.1], [0.1, 0.9]],
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = MarkovConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### Jacobian Example

The Jacobian Example demonstrates how to use HARK to solve a consumption-saving model with a Jacobian matrix.

#### Example

```python
from HARK.ConsumptionSaving.ConsIndShockModel import IndShockConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = IndShockConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### KS-HARK Presentation

The KS-HARK Presentation demonstrates how to use HARK to solve a consumption-saving model with a KS-HARK presentation.

#### Example

```python
from HARK.ConsumptionSaving.ConsIndShockModel import IndShockConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = IndShockConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### SSJ Example

The SSJ Example demonstrates how to use HARK to solve a consumption-saving model with an SSJ example.

#### Example

```python
from HARK.ConsumptionSaving.ConsIndShockModel import IndShockConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = IndShockConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### Accidental Bequest Comparison

The Accidental Bequest Comparison example demonstrates how to use HARK to solve a consumption-saving model with accidental bequests.

#### Example

```python
from HARK.ConsBequestModel import BequestConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "BequestMot": 0.5,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = BequestConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### Accidental Bequest Portfolio Comparison

The Accidental Bequest Portfolio Comparison example demonstrates how to use HARK to solve a consumption-saving model with accidental bequests and portfolio choice.

#### Example

```python
from HARK.ConsBequestModel import BequestPortfolioConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "BequestMot": 0.5,
    "RiskyAvg": 1.08,
    "RiskyStd": 0.2,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = BequestPortfolioConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### Terminal Bequest

The Terminal Bequest example demonstrates how to use HARK to solve a consumption-saving model with terminal bequests.

#### Example

```python
from HARK.ConsBequestModel import TerminalBequestConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "BequestMot": 0.5,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = TerminalBequestConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### Terminal Bequest Portfolio

The Terminal Bequest Portfolio example demonstrates how to use HARK to solve a consumption-saving model with terminal bequests and portfolio choice.

#### Example

```python
from HARK.ConsBequestModel import TerminalBequestPortfolioConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "BequestMot": 0.5,
    "RiskyAvg": 1.08,
    "RiskyStd": 0.2,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = TerminalBequestPortfolioConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### Warm Glow Bequest

The Warm Glow Bequest example demonstrates how to use HARK to solve a consumption-saving model with warm glow bequests.

#### Example

```python
from HARK.ConsBequestModel import WarmGlowBequestConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "BequestMot": 0.5,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = WarmGlowBequestConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### Warm Glow Bequest Portfolio

The Warm Glow Bequest Portfolio example demonstrates how to use HARK to solve a consumption-saving model with warm glow bequests and portfolio choice.

#### Example

```python
from HARK.ConsBequestModel import WarmGlowBequestPortfolioConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "BequestMot": 0.5,
    "RiskyAvg": 1.08,
    "RiskyStd": 0.2,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = WarmGlowBequestPortfolioConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### Wealth Portfolio

The Wealth Portfolio example demonstrates how to use HARK to solve a consumption-saving model with wealth portfolio choice.

#### Example

```python
from HARK.ConsPortfolioModel import WealthPortfolioConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "RiskyAvg": 1.08,
    "RiskyStd": 0.2,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = WealthPortfolioConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### Finite Cyclical Test

The Finite Cyclical Test example demonstrates how to use HARK to solve a consumption-saving model with finite cyclical behavior.

#### Example

```python
from HARK.ConsumptionSaving.ConsIndShockModel import IndShockConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 5,
    "AgentCount": 10000,
}

# Create an instance of the model
model = IndShockConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### SSJ Explanation

The SSJ Explanation example provides a detailed explanation of the steps involved in solving a consumption-saving model with an SSJ example.

#### Example

```python
from HARK.ConsumptionSaving.ConsIndShockModel import IndShockConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = IndShockConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### ConsRiskyAssetModel

The ConsRiskyAssetModel example demonstrates how to use HARK to solve a consumption-saving model with risky assets.

#### Example

```python
from HARK.ConsPortfolioModel import RiskyAssetConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "RiskyAvg": 1.08,
    "RiskyStd": 0.2,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = RiskyAssetConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### ConsSequentialPortfolioModel

The ConsSequentialPortfolioModel example demonstrates how to use HARK to solve a consumption-saving model with sequential portfolio choice.

#### Example

```python
from HARK.ConsPortfolioModel import SequentialPortfolioConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "RiskyAvg": 1.08,
    "RiskyStd": 0.2,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = SequentialPortfolioConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### ConsAggShockModel

The ConsAggShockModel example demonstrates how to use HARK to solve a consumption-saving model with aggregate shocks.

#### Example

```python
from HARK.ConsAggShockModel import AggShockConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "AggShockStd": 0.02,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = AggShockConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### ConsGenIncProcessModel

The ConsGenIncProcessModel example demonstrates how to use HARK to solve a consumption-saving model with a general income process.

#### Example

```python
from HARK.ConsumptionSaving.ConsGenIncProcessModel import GenIncProcessConsumerType

# Define the parameters for the model
params = {
    "CRRA": 2.5,
    "DiscFac": 0.96,
    "Rfree": 1.03,
    "LivPrb": [0.98],
    "PermGroFac": [1.01],
    "T_cycle": 1,
    "cycles": 0,
    "AgentCount": 10000,
}

# Create an instance of the model
model = GenIncProcessConsumerType(**params)

# Solve the model
model.solve()

# Print the consumption function
print(model.solution[0].cFunc)
```

### How We Solve
